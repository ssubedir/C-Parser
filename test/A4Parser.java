
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A4_104404788_Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return A4_104404788_Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public A4_104404788_Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A4_104404788_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A4_104404788_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\007" +
    "\000\002\004\010\000\002\004\010\000\002\004\007\000" +
    "\002\004\011\000\002\004\010\000\002\005\005\000\002" +
    "\005\003\000\002\006\004\000\002\006\003\000\002\007" +
    "\005\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\006\000\002\011\004\000\002\011\004\000\002\011" +
    "\005\000\002\012\006\000\002\012\007\000\002\013\005" +
    "\000\002\020\011\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\015\003\000\002\016\006" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\005\000\002" +
    "\017\005\000\002\017\003\000\002\022\007\000\002\022" +
    "\011\000\002\021\013\000\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\005\007\006\010\001\002\000\010\002" +
    "\uffff\005\007\006\010\001\002\000\004\002\176\001\002" +
    "\000\006\010\012\037\011\001\002\000\012\010\ufffd\027" +
    "\ufffd\031\ufffd\037\ufffd\001\002\000\012\010\ufffe\027\ufffe" +
    "\031\ufffe\037\ufffe\001\002\000\004\030\170\001\002\000" +
    "\006\030\014\037\013\001\002\000\004\030\162\001\002" +
    "\000\010\005\007\006\010\031\017\001\002\000\010\027" +
    "\ufff3\031\ufff3\037\161\001\002\000\004\031\157\001\002" +
    "\000\004\032\023\001\002\000\006\027\021\031\ufff5\001" +
    "\002\000\006\005\007\006\010\001\002\000\004\031\ufff6" +
    "\001\002\000\022\005\007\006\010\007\042\011\027\016" +
    "\035\032\023\035\025\037\036\001\002\000\010\002\ufffc" +
    "\005\ufffc\006\ufffc\001\002\000\004\030\151\001\002\000" +
    "\026\005\uffed\006\uffed\007\uffed\011\uffed\016\uffed\017\uffed" +
    "\032\uffed\033\uffed\035\uffed\037\uffed\001\002\000\004\030" +
    "\137\001\002\000\026\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\016\uffeb\017\uffeb\032\uffeb\033\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\026\005\uffec\006\uffec\007\uffec\011\uffec\016\uffec" +
    "\017\uffec\032\uffec\033\uffec\035\uffec\037\uffec\001\002\000" +
    "\026\005\ufff0\006\ufff0\007\ufff0\011\ufff0\016\ufff0\017\ufff0" +
    "\032\ufff0\033\ufff0\035\ufff0\037\ufff0\001\002\000\026\005" +
    "\uffef\006\uffef\007\uffef\011\uffef\016\uffef\017\uffef\032\uffef" +
    "\033\uffef\035\uffef\037\uffef\001\002\000\026\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\016\uffee\017\uffee\032\uffee\033\uffee" +
    "\035\uffee\037\uffee\001\002\000\004\030\131\001\002\000" +
    "\010\026\125\027\124\034\113\001\002\000\024\005\007" +
    "\006\010\007\042\011\027\016\035\032\023\033\130\035" +
    "\025\037\036\001\002\000\004\037\110\001\002\000\026" +
    "\005\uffea\006\uffea\007\uffea\011\uffea\016\uffea\017\uffea\032" +
    "\uffea\033\uffea\035\uffea\037\uffea\001\002\000\012\004\047" +
    "\030\050\037\044\040\043\001\002\000\032\012\uffd2\014" +
    "\uffd2\015\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\031\uffd2\001\002\000\032\014" +
    "\uffd0\015\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\100\031\uffd0\001\002\000" +
    "\032\012\061\014\055\015\060\020\057\021\064\022\062" +
    "\023\056\024\063\025\065\026\uffe0\027\uffe0\031\uffe0\001" +
    "\002\000\032\012\uffd6\014\uffd6\015\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\001\002\000\032\012\uffd1\014\uffd1\015\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\031\uffd1\001\002\000\012\004\047\030\050\037\044" +
    "\040\043\001\002\000\004\026\052\001\002\000\026\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\016\uffe2\017\uffe2\032\uffe2" +
    "\033\uffe2\035\uffe2\037\uffe2\001\002\000\004\031\054\001" +
    "\002\000\032\012\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\001\002\000\012\004\047\030\050\037\044\040\043" +
    "\001\002\000\012\004\047\030\050\037\044\040\043\001" +
    "\002\000\012\004\047\030\050\037\044\040\043\001\002" +
    "\000\012\004\047\030\050\037\044\040\043\001\002\000" +
    "\012\004\047\030\050\037\044\040\043\001\002\000\012" +
    "\004\047\030\050\037\044\040\043\001\002\000\012\004" +
    "\047\030\050\037\044\040\043\001\002\000\012\004\047" +
    "\030\050\037\044\040\043\001\002\000\012\004\047\030" +
    "\050\037\044\040\043\001\002\000\010\026\uffd7\027\uffd7" +
    "\031\uffd7\001\002\000\010\026\uffdb\027\uffdb\031\uffdb\001" +
    "\002\000\010\026\uffd8\027\uffd8\031\uffd8\001\002\000\010" +
    "\026\uffda\027\uffda\031\uffda\001\002\000\010\026\uffde\027" +
    "\uffde\031\uffde\001\002\000\010\026\uffdf\027\uffdf\031\uffdf" +
    "\001\002\000\010\026\uffdc\027\uffdc\031\uffdc\001\002\000" +
    "\010\026\uffd9\027\uffd9\031\uffd9\001\002\000\010\026\uffdd" +
    "\027\uffdd\031\uffdd\001\002\000\004\012\107\001\002\000" +
    "\014\004\047\030\050\031\102\037\044\040\043\001\002" +
    "\000\006\027\105\031\uffcd\001\002\000\032\012\uffd3\014" +
    "\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\031\uffd3\001\002\000\004\031" +
    "\104\001\002\000\032\012\uffd5\014\uffd5\015\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\001\002\000\012\004\047\030\050\037\044" +
    "\040\043\001\002\000\004\031\uffce\001\002\000\032\012" +
    "\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\001\002\000" +
    "\010\026\114\027\112\034\113\001\002\000\026\005\uffe7" +
    "\006\uffe7\007\uffe7\011\uffe7\016\uffe7\017\uffe7\032\uffe7\033" +
    "\uffe7\035\uffe7\037\uffe7\001\002\000\010\005\007\006\010" +
    "\037\122\001\002\000\012\004\047\030\050\037\044\040" +
    "\043\001\002\000\026\005\uffe9\006\uffe9\007\uffe9\011\uffe9" +
    "\016\uffe9\017\uffe9\032\uffe9\033\uffe9\035\uffe9\037\uffe9\001" +
    "\002\000\006\026\117\027\116\001\002\000\004\037\120" +
    "\001\002\000\026\005\uffe4\006\uffe4\007\uffe4\011\uffe4\016" +
    "\uffe4\017\uffe4\032\uffe4\033\uffe4\035\uffe4\037\uffe4\001\002" +
    "\000\004\034\113\001\002\000\026\005\uffe3\006\uffe3\007" +
    "\uffe3\011\uffe3\016\uffe3\017\uffe3\032\uffe3\033\uffe3\035\uffe3" +
    "\037\uffe3\001\002\000\006\026\125\027\124\001\002\000" +
    "\026\005\uffe8\006\uffe8\007\uffe8\011\uffe8\016\uffe8\017\uffe8" +
    "\032\uffe8\033\uffe8\035\uffe8\037\uffe8\001\002\000\010\005" +
    "\007\006\010\037\122\001\002\000\026\005\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\016\uffe6\017\uffe6\032\uffe6\033\uffe6\035" +
    "\uffe6\037\uffe6\001\002\000\026\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\016\uffe5\017\uffe5\032\uffe5\033\uffe5\035\uffe5\037" +
    "\uffe5\001\002\000\026\005\007\006\010\007\042\011\027" +
    "\016\035\017\ufff1\032\023\033\ufff1\035\025\037\036\001" +
    "\002\000\030\002\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2" +
    "\016\ufff2\017\ufff2\032\ufff2\033\ufff2\035\ufff2\037\ufff2\001" +
    "\002\000\012\004\047\030\050\037\044\040\043\001\002" +
    "\000\004\031\133\001\002\000\022\005\007\006\010\007" +
    "\042\011\027\016\035\032\023\035\025\037\036\001\002" +
    "\000\026\005\007\006\010\007\042\011\027\016\035\017" +
    "\135\032\023\033\uffcc\035\025\037\036\001\002\000\022" +
    "\005\007\006\010\007\042\011\027\016\035\032\023\035" +
    "\025\037\036\001\002\000\006\017\uffcb\033\uffcb\001\002" +
    "\000\012\004\047\030\050\037\044\040\043\001\002\000" +
    "\004\026\141\001\002\000\012\004\047\030\050\037\044" +
    "\040\043\001\002\000\006\026\143\031\144\001\002\000" +
    "\012\004\047\030\050\037\044\040\043\001\002\000\022" +
    "\005\007\006\010\007\042\011\027\016\035\032\023\035" +
    "\025\037\036\001\002\000\026\005\007\006\010\007\042" +
    "\011\027\016\035\017\uffc9\032\023\033\uffc9\035\025\037" +
    "\036\001\002\000\004\031\147\001\002\000\022\005\007" +
    "\006\010\007\042\011\027\016\035\032\023\035\025\037" +
    "\036\001\002\000\026\005\007\006\010\007\042\011\027" +
    "\016\035\017\uffca\032\023\033\uffca\035\025\037\036\001" +
    "\002\000\004\040\152\001\002\000\004\027\153\001\002" +
    "\000\004\037\154\001\002\000\004\031\155\001\002\000" +
    "\004\026\156\001\002\000\026\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\016\uffe1\017\uffe1\032\uffe1\033\uffe1\035\uffe1\037" +
    "\uffe1\001\002\000\004\032\023\001\002\000\010\002\ufffb" +
    "\005\ufffb\006\ufffb\001\002\000\006\027\ufff4\031\ufff4\001" +
    "\002\000\010\005\007\006\010\031\164\001\002\000\004" +
    "\031\166\001\002\000\004\032\023\001\002\000\010\002" +
    "\ufffa\005\ufffa\006\ufffa\001\002\000\004\032\023\001\002" +
    "\000\010\002\ufff8\005\ufff8\006\ufff8\001\002\000\010\005" +
    "\007\006\010\031\172\001\002\000\004\031\174\001\002" +
    "\000\004\032\023\001\002\000\010\002\ufff9\005\ufff9\006" +
    "\ufff9\001\002\000\004\032\023\001\002\000\010\002\ufff7" +
    "\005\ufff7\006\ufff7\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\010\002\004\003\005\004\003\001\001\000" +
    "\010\002\176\003\005\004\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\014\005\015\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\023\001\001\000\002\001\001" +
    "\000\010\003\014\005\021\006\017\001\001\000\002\001" +
    "\001\000\024\003\037\007\031\010\036\011\032\012\033" +
    "\013\025\020\030\021\040\022\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\037\007\031\010\126\011\032\012" +
    "\033\013\025\020\030\021\040\022\027\001\001\000\004" +
    "\012\110\001\001\000\002\001\001\000\010\014\050\015" +
    "\044\016\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\052\015\044\016\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\075\015\044\016\045\001\001\000\010\014\074" +
    "\015\044\016\045\001\001\000\010\014\073\015\044\016" +
    "\045\001\001\000\010\014\072\015\044\016\045\001\001" +
    "\000\010\014\071\015\044\016\045\001\001\000\010\014" +
    "\070\015\044\016\045\001\001\000\010\014\067\015\044" +
    "\016\045\001\001\000\010\014\066\015\044\016\045\001" +
    "\001\000\010\014\065\015\044\016\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\100\015\044\016\045\017\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\100\015\044\016\045\017\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\037\011\122\001\001\000\010" +
    "\014\114\015\044\016\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\037\011\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\037\007\031\010" +
    "\126\011\032\012\033\013\025\020\030\021\040\022\027" +
    "\001\001\000\002\001\001\000\010\014\131\015\044\016" +
    "\045\001\001\000\002\001\001\000\024\003\037\007\031" +
    "\010\133\011\032\012\033\013\025\020\030\021\040\022" +
    "\027\001\001\000\024\003\037\007\031\010\126\011\032" +
    "\012\033\013\025\020\030\021\040\022\027\001\001\000" +
    "\024\003\037\007\031\010\135\011\032\012\033\013\025" +
    "\020\030\021\040\022\027\001\001\000\024\003\037\007" +
    "\031\010\126\011\032\012\033\013\025\020\030\021\040" +
    "\022\027\001\001\000\010\014\137\015\044\016\045\001" +
    "\001\000\002\001\001\000\010\014\141\015\044\016\045" +
    "\001\001\000\002\001\001\000\010\014\145\015\044\016" +
    "\045\001\001\000\024\003\037\007\031\010\144\011\032" +
    "\012\033\013\025\020\030\021\040\022\027\001\001\000" +
    "\024\003\037\007\031\010\126\011\032\012\033\013\025" +
    "\020\030\021\040\022\027\001\001\000\002\001\001\000" +
    "\024\003\037\007\031\010\147\011\032\012\033\013\025" +
    "\020\030\021\040\022\027\001\001\000\024\003\037\007" +
    "\031\010\126\011\032\012\033\013\025\020\030\021\040" +
    "\022\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\005\162\006\017\001\001" +
    "\000\002\001\001\000\004\007\164\001\001\000\002\001" +
    "\001\000\004\007\166\001\001\000\002\001\001\000\010" +
    "\003\014\005\170\006\017\001\001\000\002\001\001\000" +
    "\004\007\172\001\001\000\002\001\001\000\004\007\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4_104404788_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4_104404788_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4_104404788_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A4_104404788_Parser$actions {
  private final A4_104404788_Parser parser;

  /** Constructor */
  CUP$A4_104404788_Parser$actions(A4_104404788_Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A4_104404788_Parser$do_action_part00000000(
    int                        CUP$A4_104404788_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4_104404788_Parser$parser,
    java.util.Stack            CUP$A4_104404788_Parser$stack,
    int                        CUP$A4_104404788_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4_104404788_Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4_104404788_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= methodDecl program 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A4_104404788_Parser$stack.peek()).value;
		 RESULT =e+1; 
              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A4_104404788_Parser$parser.done_parsing();
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= methodDecl 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= INT 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methodDecl ::= type MAIN LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methodDecl ::= type MAIN LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methodDecl ::= type MAIN ID LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methodDecl ::= type ID LPAR RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDecl ::= type MAIN ID LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDecl ::= type ID LPAR formalParams RPAR block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-5)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalParams ::= formalParam COMMA formalParams 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalParams ::= formalParam 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalParam ::= type ID 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalParam ::= type 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("formalParam",4, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LBRA statement RBRA 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= statement statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= block 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= returnStmt 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= printStmt 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localVarDecl ::= type ID SEMI 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // localVarDecl ::= type ID COMMA localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // localVarDecl ::= type assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localVarDecl ::= ID SEMI 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localVarDecl ::= ID COMMA localVarDecl 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",7, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignStmt ::= ID EQUAL expression SEMI 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignStmt ::= ID EQUAL expression COMMA assignStmt 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("assignStmt",8, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnStmt ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("returnStmt",9, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printStmt ::= PRINTF LPAR QUOTES COMMA ID RPAR SEMI 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("printStmt",14, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= multiplicativeExpr 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= multiplicativeExpr MULTI expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= multiplicativeExpr PLUS expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= multiplicativeExpr MINUS expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= multiplicativeExpr GOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= multiplicativeExpr LOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= multiplicativeExpr GEOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= multiplicativeExpr LEOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= multiplicativeExpr EEOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= multiplicativeExpr NEOPR expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicativeExpr ::= primaryExpr 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",11, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primaryExpr ::= ID LPAR actualParams RPAR 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primaryExpr ::= LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryExpr ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpr ::= QUOTES 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpr ::= NUMBER 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpr ::= ID 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpr ::= ID PLUS PLUS 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",12, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actualParams ::= expression COMMA actualParams 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",13, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actualParams ::= expression 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("actualParams",13, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // selection_statement ::= IF LPAR expression RPAR statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",16, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // selection_statement ::= IF LPAR expression RPAR statement ELSE statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("selection_statement",16, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // iteration_statement ::= FOR LPAR expression SEMI expression SEMI expression RPAR statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",15, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-8)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // iteration_statement ::= FOR LPAR expression SEMI expression RPAR statement 
            {
              Object RESULT =null;

              CUP$A4_104404788_Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",15, ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.elementAt(CUP$A4_104404788_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$A4_104404788_Parser$stack.peek()), RESULT);
            }
          return CUP$A4_104404788_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A4_104404788_Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A4_104404788_Parser$do_action(
    int                        CUP$A4_104404788_Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4_104404788_Parser$parser,
    java.util.Stack            CUP$A4_104404788_Parser$stack,
    int                        CUP$A4_104404788_Parser$top)
    throws java.lang.Exception
    {
              return CUP$A4_104404788_Parser$do_action_part00000000(
                               CUP$A4_104404788_Parser$act_num,
                               CUP$A4_104404788_Parser$parser,
                               CUP$A4_104404788_Parser$stack,
                               CUP$A4_104404788_Parser$top);
    }
}

}
